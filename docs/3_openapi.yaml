openapi: 3.0.3
info:
  title: Budget Tracker API
  version: 1.0.0
  description: Minimal API for authentication and transactions (MVP).

servers:
  - url: http://127.0.0.1:8000/api
    description: Local dev

tags:
  - name: Auth
    description: Register and login
  - name: Transactions
    description: CRUD and list transactions

paths:
  /auth/register/:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RegisterRequest" }
      responses:
        "200": { description: Registered }
        "400": { description: Invalid input }
        "500": { description: Server Error }

  /auth/login/:
    post:
      tags: [Auth]
      summary: Login and receive JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginRequest" }
      responses:
        "200":
          description: Tokens issued
          content:
            application/json:
              schema: { $ref: "#/components/schemas/JWTResponse" }
        "400": { description: Invalid input }
        "401": { description: Invalid credentials }
        "500": { description: Server Error }

  /transactions/:
    get:
      tags: [Transactions]
      summary: List transactions
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
          description: ISO date (YYYY-MM-DD)
        - in: query
          name: to
          schema: { type: string, format: date }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: page_size
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        "200":
          description: Paged list of transactions
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PaginatedTransactionList" }
    post:
      tags: [Transactions]
      summary: Create transaction
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TransactionCreate" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Transaction" }
        "400": { description: Validation error }

  /transactions/{id}/:
    get:
      tags: [Transactions]
      summary: Get a transaction by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Transaction
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Transaction" }
        "404": { description: Not found }
    put:
      tags: [Transactions]
      summary: Update a transaction
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TransactionUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Transaction" }
        "400": { description: Validation error }
        "404": { description: Not found }
    delete:
      tags: [Transactions]
      summary: Delete a transaction
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "204": { description: Deleted }
        "404": { description: Not found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [userName, email, password]
      properties:
        userName: { 
          type: string, 
          minLength: 1,
          example: "Amy Waters" 
        }
        email: { 
          type: string, 
          format: email, 
          example: "user@example.com" 
        }
        password: { 
          type: string, 
          minLength: 8, 
          example: "Str0ngPass!" 
        }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }

    JWTResponse:
      type: object
      properties:
        access: { type: string, description: "JWT access token" }
        refresh: { type: string, description: "JWT refresh token" }

    Transaction:
      type: object
      properties:
        id: { type: string, format: uuid }
        amount: { type: number, multipleOf: 0.01, example: 45.50 }
        currency: { type: string, example: "USD" }
        note: { type: string, nullable: true, example: "Lunch" }
        spent_at: { type: string, format: date-time, example: "2025-10-16T13:00:00Z" }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    TransactionCreate:
      type: object
      required: [amount, spent_at]
      properties:
        amount: { type: number, multipleOf: 0.01 }
        currency: { type: string, default: "USD" }
        note: { type: string, nullable: true }
        spent_at: { type: string, format: date-time }

    TransactionUpdate:
      allOf:
        - $ref: "#/components/schemas/TransactionCreate"

    PaginatedTransactionList:
      type: object
      properties:
        count: { type: integer, example: 42 }
        next: { type: string, nullable: true, example: null }
        previous: { type: string, nullable: true, example: null }
        results:
          type: array
          items: { $ref: "#/components/schemas/Transaction" }
